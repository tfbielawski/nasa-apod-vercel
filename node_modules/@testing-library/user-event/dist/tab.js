"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tab = tab;

var _dom = require("@testing-library/dom");

var _utils = require("./utils");

var _focus = require("./focus");

var _blur = require("./blur");

function tab({
  shift = false,
  focusTrap
} = {}) {
  var _focusTrap$ownerDocum, _focusTrap;

  const previousElement = (0, _utils.getActiveElement)((_focusTrap$ownerDocum = (_focusTrap = focusTrap) == null ? void 0 : _focusTrap.ownerDocument) != null ? _focusTrap$ownerDocum : document);

  if (!focusTrap) {
    focusTrap = document;
  }

  const focusableElements = focusTrap.querySelectorAll(_utils.FOCUSABLE_SELECTOR);
  const enabledElements = [...focusableElements].filter(el => el.getAttribute('tabindex') !== '-1' && !el.disabled);
  if (enabledElements.length === 0) return;
  const orderedElements = enabledElements.map((el, idx) => ({
    el,
    idx
  })).sort((a, b) => {
    const tabIndexA = a.el.getAttribute('tabindex');
    const tabIndexB = b.el.getAttribute('tabindex');
    const diff = tabIndexA - tabIndexB;
    return diff === 0 ? a.idx - b.idx : diff;
  }).map(({
    el
  }) => el);
  if (shift) orderedElements.reverse(); // keep only the checked or first element in each radio group

  const prunedElements = [];

  for (const el of orderedElements) {
    if (el.type === 'radio' && el.name) {
      const replacedIndex = prunedElements.findIndex(({
        name
      }) => name === el.name);

      if (replacedIndex === -1) {
        prunedElements.push(el);
      } else if (el.checked) {
        prunedElements.splice(replacedIndex, 1);
        prunedElements.push(el);
      }
    } else {
      prunedElements.push(el);
    }
  }

  if (shift) prunedElements.reverse();
  const index = prunedElements.findIndex(el => el === el.ownerDocument.activeElement);
  const nextIndex = shift ? index - 1 : index + 1;
  const defaultIndex = shift ? prunedElements.length - 1 : 0;
  const nextElement = prunedElements[nextIndex] || prunedElements[defaultIndex];
  const shiftKeyInit = {
    key: 'Shift',
    keyCode: 16,
    shiftKey: true
  };
  const tabKeyInit = {
    key: 'Tab',
    keyCode: 9,
    shiftKey: shift
  };
  let continueToTab = true; // not sure how to make it so there's no previous element...
  // istanbul ignore else

  if (previousElement) {
    // preventDefault on the shift key makes no difference
    if (shift) _dom.fireEvent.keyDown(previousElement, { ...shiftKeyInit
    });
    continueToTab = _dom.fireEvent.keyDown(previousElement, { ...tabKeyInit
    });

    if (continueToTab) {
      (0, _blur.blur)(previousElement);
    }
  }

  const keyUpTarget = !continueToTab && previousElement ? previousElement : nextElement;

  if (continueToTab) {
    const hasTabIndex = nextElement.getAttribute('tabindex') !== null;

    if (!hasTabIndex) {
      nextElement.setAttribute('tabindex', '0'); // jsdom requires tabIndex=0 for an item to become 'document.activeElement'
    }

    (0, _focus.focus)(nextElement);

    if (!hasTabIndex) {
      nextElement.removeAttribute('tabindex'); // leave no trace. :)
    }
  }

  _dom.fireEvent.keyUp(keyUpTarget, { ...tabKeyInit
  });

  if (shift) {
    _dom.fireEvent.keyUp(keyUpTarget, { ...shiftKeyInit,
      shiftKey: false
    });
  }
}
/*
eslint
  complexity: "off",
  max-statements: "off",
*/